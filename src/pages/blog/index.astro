---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

const allPosts = await getCollection('blog') || [];
const sortedPosts = allPosts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Group posts by year for timeline effect
const postsByYear = sortedPosts.reduce((acc, post) => {
  const year = new Date(post.data.pubDate).getFullYear();
  if (!acc[year]) acc[year] = [];
  acc[year].push(post);
  return acc;
}, {});

const years = Object.keys(postsByYear).sort((a, b) => b - a);

// Get total post count
const totalPosts = sortedPosts.length;

// Get unique tags for search suggestions
const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags || []))];
---

<BaseLayout title="Blog">
  <div class="w-full max-w-6xl mx-auto px-4 sm:px-6 py-10 sm:py-16">
    <!-- Enhanced header with search - improved responsive spacing -->
    <div class="relative mb-12 sm:mb-20">
      <!-- Decorative elements - adjusted for better mobile appearance -->
      <div class="absolute -top-10 sm:-top-20 -left-10 sm:-left-20 w-48 sm:w-72 h-48 sm:h-72 bg-zinc-100 dark:bg-zinc-800/30 rounded-full blur-3xl opacity-30 animate-blob"></div>
      <div class="absolute -bottom-10 sm:-bottom-20 -right-10 sm:-right-20 w-48 sm:w-72 h-48 sm:h-72 bg-zinc-200 dark:bg-zinc-800/30 rounded-full blur-3xl opacity-30 animate-blob animation-delay-2000"></div>
      
      <div class="relative text-center">
        <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold tracking-tight text-zinc-900 dark:text-zinc-100 mb-4">
          Journal
        </h1>
        
        <p class="text-sm sm:text-base text-zinc-600 dark:text-zinc-400 mb-6 sm:mb-10 max-w-2xl mx-auto">
          Thoughts, ideas, and explorations on design and technology.
        </p>
      </div>
    </div>
    
    <!-- Improved grid layout for better mobile experience -->
    <div class="grid grid-cols-1 md:grid-cols-12 gap-6 sm:gap-8">
      <!-- Featured post (if exists) - improved mobile layout -->
      {sortedPosts.length > 0 && (
        <div class="md:col-span-12 mb-8 sm:mb-12">
          <article class="group relative overflow-hidden rounded-none border-b border-zinc-200 dark:border-zinc-800 pb-6 sm:pb-8">            
            <div class="flex flex-col md:flex-row h-full gap-6 sm:gap-8">
              {sortedPosts[0].data.heroImage && (
                <div class="w-full md:w-1/2 h-60 sm:h-80 md:h-96 overflow-hidden mx-auto md:mx-0 max-w-full sm:max-w-md">
                  <img
                    src={sortedPosts[0].data.heroImage}
                    alt={sortedPosts[0].data.title}
                    class="w-full h-full object-cover grayscale hover:grayscale-0 transition-all duration-700 group-hover:scale-105"
                    loading="eager"
                  />
                </div>
              )}
              
              <div class="flex-1 flex flex-col justify-center">
                <div class="flex items-center text-xs sm:text-sm text-zinc-500 dark:text-zinc-400 gap-2 mb-3 justify-center md:justify-start">
                  <span class="font-medium uppercase tracking-wider">Featured</span>
                  <span class="h-px w-6 sm:w-8 bg-zinc-300 dark:bg-zinc-700"></span>
                  {sortedPosts[0].data.pubDate && (
                    <time datetime={sortedPosts[0].data.pubDate.toISOString()}>
                      {sortedPosts[0].data.pubDate.toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}
                    </time>
                  )}
                </div>
                
                <h2 class="text-2xl sm:text-3xl font-bold text-zinc-900 dark:text-zinc-100 mb-3 sm:mb-4 group-hover:text-zinc-700 dark:group-hover:text-zinc-300 transition-colors text-center md:text-left">
                  <a href={`/blog/${sortedPosts[0].slug}/`} class="before:absolute before:inset-0">
                    {sortedPosts[0].data.title}
                  </a>
                </h2>
                
                <p class="text-sm sm:text-base text-zinc-600 dark:text-zinc-400 mb-4 sm:mb-6 line-clamp-3 text-center md:text-left">
                  {sortedPosts[0].data.description}
                </p>
                
                <!-- Improved mobile layout for featured post metadata -->
                <div class="flex items-center gap-3 sm:gap-4 justify-center md:justify-start flex-wrap">
                  <div class="flex items-center text-xs sm:text-sm text-zinc-500 dark:text-zinc-400">
                    <span class="inline-flex items-center">
                      {sortedPosts[0].data.readingTime || "5 min read"}
                    </span>
                  </div>
                  
                  {sortedPosts[0].data.tags && (
                    <div class="flex flex-wrap gap-2 justify-center md:justify-start">
                      {sortedPosts[0].data.tags.slice(0, 2).map((tag) => (
                        <span class="px-2 sm:px-3 py-1 text-xs uppercase tracking-wider border border-zinc-200 dark:border-zinc-800 text-zinc-600 dark:text-zinc-400">
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </article>
        </div>
      )}
      
      <!-- Improved sidebar for mobile -->
      <div class="md:col-span-3 relative">
        <div class="md:sticky md:top-24 space-y-4 mb-8 md:mb-0">
          <h3 class="text-lg font-medium text-zinc-900 dark:text-zinc-100 mb-4 uppercase tracking-wider text-center md:text-left">Archive</h3>
          
          <!-- Horizontal scrollable archive on mobile, vertical on desktop -->
          <div class="flex md:flex-col overflow-x-auto md:overflow-visible pb-4 md:pb-0 hide-scrollbar">
            {years.map((year, index) => (
              <a 
                href={`#year-${year}`}
                class={`flex items-center py-2 md:py-3 px-4 md:px-0 mr-3 md:mr-0 border-b border-zinc-100 dark:border-zinc-800 hover:bg-zinc-50 dark:hover:bg-zinc-900 transition-colors md:w-full whitespace-nowrap md:whitespace-normal rounded-full md:rounded-none ${index === 0 ? 'bg-zinc-50 dark:bg-zinc-800/50' : ''}`}
              >
                <span class="text-base md:text-lg font-medium text-zinc-900 dark:text-zinc-100">{year}</span>
                <span class="ml-2 md:ml-auto text-xs md:text-sm text-zinc-500 dark:text-zinc-400">
                  {postsByYear[year].length} post{postsByYear[year].length !== 1 ? 's' : ''}
                </span>
              </a>
            ))}
          </div>
        </div>
      </div>
      
      <!-- Improved post grid for mobile -->
      <div class="md:col-span-9">
        {years.map((year) => (
          <div id={`year-${year}`} class="mb-12 sm:mb-20 scroll-mt-16">
            <h2 class="text-xl sm:text-2xl font-bold text-zinc-900 dark:text-zinc-100 mb-6 sm:mb-8 border-b border-zinc-200 dark:border-zinc-800 pb-3 sm:pb-4 text-center md:text-left">
              {year}
            </h2>
            
            <div class={`grid grid-cols-1 ${postsByYear[year].length >= 2 ? 'md:grid-cols-2' : 'md:grid-cols-1'} gap-8 sm:gap-12`}>
              {postsByYear[year].map((post, index) => (
                <article class="group relative flex flex-col h-full mx-auto md:mx-0 w-full max-w-sm sm:max-w-md">
                  {post.data.heroImage && (
                    <div class="h-48 sm:h-56 overflow-hidden mb-4 rounded-lg">
                      <img
                        src={post.data.heroImage}
                        alt={post.data.title}
                        class="w-full h-full object-cover grayscale hover:grayscale-0 transition-all duration-700 group-hover:scale-105"
                        loading="lazy"
                      />
                    </div>
                  )}
                  
                  <div class="flex-1 flex flex-col">
                    <div class="flex items-center text-xs sm:text-sm text-zinc-500 dark:text-zinc-400 gap-3 sm:gap-4 mb-2 sm:mb-3 justify-center md:justify-start flex-wrap">
                      {post.data.pubDate && (
                        <time datetime={post.data.pubDate.toISOString()} class="flex items-center">
                          {post.data.pubDate.toLocaleDateString('en-US', { 
                            month: 'short', 
                            day: 'numeric' 
                          })}
                        </time>
                      )}
                      {post.data.readingTime && (
                        <span class="flex items-center">
                          {post.data.readingTime}
                        </span>
                      )}
                    </div>
                    
                    <h3 class="text-lg sm:text-xl font-semibold text-zinc-900 dark:text-zinc-100 mb-2 sm:mb-3 group-hover:text-zinc-700 dark:group-hover:text-zinc-300 transition-colors text-center md:text-left">
                      <a href={`/blog/${post.slug}/`} class="before:absolute before:inset-0">
                        {post.data.title}
                      </a>
                    </h3>
                    
                    <p class="text-sm text-zinc-600 dark:text-zinc-400 mb-4 line-clamp-2 flex-grow text-center md:text-left">
                      {post.data.description}
                    </p>
                    
                    {post.data.tags && (
                      <div class="flex flex-wrap gap-2 mt-auto justify-center md:justify-start">
                        {post.data.tags.slice(0, 2).map((tag) => (
                          <span class="px-2 sm:px-3 py-1 text-xs uppercase tracking-wider border border-zinc-200 dark:border-zinc-800 text-zinc-600 dark:text-zinc-400">
                            {tag}
                          </span>
                        ))}
                        {post.data.tags.length > 2 && (
                          <span class="px-2 sm:px-3 py-1 text-xs uppercase tracking-wider border border-zinc-200 dark:border-zinc-800 text-zinc-600 dark:text-zinc-400">
                            +{post.data.tags.length - 2}
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                </article>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Blob animation */
  .animate-blob {
    animation: blob-bounce 8s infinite ease;
  }
  
  .animation-delay-2000 {
    animation-delay: 2s;
  }
  
  @keyframes blob-bounce {
    0%, 100% {
      transform: translate(0, 0) scale(1);
    }
    25% {
      transform: translate(5%, 5%) scale(1.05);
    }
    50% {
      transform: translate(0, 10%) scale(1);
    }
    75% {
      transform: translate(-5%, 5%) scale(0.95);
    }
  }
  
  /* Search container hover effect */
  .search-container:hover .search-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
  }
  
  /* Input focus animation */
  input:focus + div .search-pulse {
    animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  /* Hide scrollbar but keep functionality */
  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }
  
  /* Line clamp for descriptions */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Improved touch targets for mobile */
  @media (max-width: 640px) {
    a, button {
      min-height: 44px;
      display: flex;
      align-items: center;
    }
  }
</style>

<script>
  // Script không thay đổi - giữ nguyên chức năng
  document.addEventListener('DOMContentLoaded', () => {
    const backToTopButton = document.getElementById('back-to-top');
    
    if (backToTopButton) {
      // Show button when scrolled down
      const toggleBackToTopButton = () => {
        if (window.scrollY > 300) {
          backToTopButton.classList.remove('opacity-0', 'invisible');
          backToTopButton.classList.add('opacity-100', 'visible');
        } else {
          backToTopButton.classList.remove('opacity-100', 'visible');
          backToTopButton.classList.add('opacity-0', 'invisible');
        }
      };
      
      // Scroll to top when clicked
      backToTopButton.addEventListener('click', () => {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      });
      
      // Check scroll position
      window.addEventListener('scroll', toggleBackToTopButton);
      toggleBackToTopButton(); // Initial check
    }
    
    // Add smooth scrolling to year links
    document.querySelectorAll('a[href^="#year-"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        
        if (targetElement) {
          window.scrollTo({
            top: targetElement.offsetTop - 100,
            behavior: 'smooth'
          });
          
          // Update URL hash without jumping
          history.pushState(null, null, targetId);
        }
      });
    });
    
    // Add touch support for hover effects
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    if (isTouchDevice) {
      const articles = document.querySelectorAll('article');
      
      articles.forEach(article => {
        article.addEventListener('touchstart', () => {
          article.classList.add('is-touched');
        });
        
        article.addEventListener('touchend', () => {
          setTimeout(() => {
            article.classList.remove('is-touched');
          }, 300);
        });
      });
    }
  });
  
  // SPA transition handling
  function setupSPATransitions() {
    // Handle all blog post links for SPA transitions
    document.querySelectorAll('a[href^="/blog/"]').forEach(link => {
      // Skip links that are anchor links or already processed
      if (link.getAttribute('href').includes('#') || link.hasAttribute('data-spa-handled')) {
        return;
      }
      
      // Mark as handled to avoid duplicate listeners
      link.setAttribute('data-spa-handled', 'true');
      
      link.addEventListener('click', (e) => {
        // Don't handle if modifier keys are pressed (for opening in new tab, etc.)
        if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {
          return;
        }
        
        e.preventDefault();
        const targetHref = link.getAttribute('href');
        
        // Trigger page transition animation
        const pageTransition = document.getElementById('page-transition');
        if (pageTransition) {
          pageTransition.classList.remove('opacity-0');
          pageTransition.classList.add('opacity-100');
          
          // Navigate after transition effect
          setTimeout(() => {
            window.location.href = targetHref;
          }, 300);
        } else {
          // Fallback if transition element doesn't exist
          window.location.href = targetHref;
        }
      });
    });
    
    // Handle year anchor links specially
    document.querySelectorAll('a[href^="#year-"]').forEach(anchor => {
      anchor.setAttribute('data-spa-internal', 'true');
    });
  }
  
  // Initialize on first load
  document.addEventListener('DOMContentLoaded', setupSPATransitions);
  
  // Re-initialize when content changes via Astro's view transitions
  document.addEventListener('astro:page-load', setupSPATransitions);
  
  // For compatibility with custom transition system
  document.addEventListener('page-transition-complete', setupSPATransitions);
</script>