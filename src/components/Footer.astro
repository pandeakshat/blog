---
const currentYear = new Date().getFullYear();

// Define navigation links
const navLinks = [
  { text: 'About', href: '/about' },
  { text: 'Blog', href: '/blog' },
  { text: 'Tags', href: '/tags' },
  { text: 'RSS', href: '/rss.xml' },
];

// Define social links
const socialLinks = [
  { 
    name: 'Twitter', 
    href: 'https://twitter.com/iam_akshatpande', 
    icon: `<path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>`
  },
  { 
    name: 'GitHub', 
    href: 'https://github.com/pandeakshat', 
    icon: `<path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd"></path>`
  },
  { 
    name: 'LinkedIn', 
    href: 'https://linkedin.com/in/pandeakshat', 
    icon: `<path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path>`
  }
];

// Spotify credentials from environment variables
const SPOTIFY_CLIENT_ID = import.meta.env.SPOTIFY_CLIENT_ID;
const SPOTIFY_CLIENT_SECRET = import.meta.env.SPOTIFY_CLIENT_SECRET;
const REFRESH_TOKEN = import.meta.env.SPOTIFY_REFRESH_TOKEN;
---

<footer class="relative mt-20 overflow-hidden border-t border-zinc-100 dark:border-zinc-800 theme-transition-all">
  <!-- Enhanced decorative elements with animation -->
  <div class="absolute inset-0 pointer-events-none overflow-hidden">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-zinc-100 dark:bg-zinc-800/30 rounded-full blur-3xl opacity-50 theme-transition-all animate-float-slow"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-zinc-100 dark:bg-zinc-800/30 rounded-full blur-3xl opacity-50 theme-transition-all animate-float-slow animation-delay-2000"></div>
    <div class="absolute top-20 left-1/4 w-40 h-40 bg-zinc-200/50 dark:bg-zinc-700/20 rounded-full blur-2xl opacity-30 theme-transition-all animate-float-slow animation-delay-1000"></div>
  </div>
  
  <div class="relative pt-16 pb-12 px-4 sm:px-6">
    <div class="max-w-4xl mx-auto">
      <!-- Main footer content with improved grid layout -->
      <div class="grid grid-cols-1 md:grid-cols-12 gap-10">
        <!-- Brand section - enhanced with better spacing -->
        <div class="col-span-1 md:col-span-3">
          <a href="/" class="inline-block group">
            <div class="flex items-center">
              <div class="relative w-10 h-10 rounded-lg bg-gradient-to-br from-zinc-800 to-zinc-600 dark:from-zinc-200 dark:to-zinc-400 flex items-center justify-center overflow-hidden shadow-lg transform transition-transform group-hover:scale-105">
                <span class="text-white dark:text-zinc-900 text-xl font-bold theme-transition-all group-hover:scale-110 transition-transform duration-300">PA</span>
                <div class="absolute inset-0 bg-gradient-to-br from-zinc-700 to-zinc-900 dark:from-zinc-300 dark:to-zinc-100 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <span class="ml-3 text-xl font-bold text-zinc-900 dark:text-zinc-100 theme-transition-color">Blog</span>
            </div>
          </a>
          
          <p class="mt-4 text-sm text-zinc-600 dark:text-zinc-400 theme-transition-color leading-relaxed">
            Built on curiosity, mistakes, and the joy of figuring things out.
          </p>
          
          <!-- Enhanced social links with improved hover effects -->
          <div class="mt-6 flex items-center space-x-4">
            {socialLinks.map(social => (
              <a 
                href={social.href} 
                target="_blank" 
                rel="noopener noreferrer" 
                class="group relative flex items-center justify-center w-10 h-10 rounded-full bg-zinc-100 dark:bg-zinc-800 text-zinc-500 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 transition-all duration-300 hover:ring-2 hover:ring-zinc-300 dark:hover:ring-zinc-700 transform hover:-translate-y-1"
                aria-label={social.name}
              >
                <span class="absolute inset-0 rounded-full bg-gradient-to-br from-zinc-200 to-zinc-300 dark:from-zinc-700 dark:to-zinc-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
                <svg class="w-5 h-5 relative z-10 transition-transform duration-300 group-hover:scale-110" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <Fragment set:html={social.icon} />
                </svg>
              </a>
            ))}
          </div>
        </div>
        
        <!-- Quick links with enhanced styling -->
        <div class="col-span-1 md:col-span-3">
          <h3 class="text-sm font-semibold text-zinc-900 dark:text-zinc-100 uppercase tracking-wider theme-transition-color relative inline-block after:content-[''] after:absolute after:w-8 after:h-0.5 after:bg-zinc-300 dark:after:bg-zinc-700 after:bottom-0 after:left-0 pb-2">Navigation</h3>
          <ul class="mt-4 space-y-3">
            {navLinks.map(link => (
              <li>
                <a 
                  href={link.href} 
                  class="group flex items-center text-base text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 transition-colors"
                >
                  <span class="relative overflow-hidden inline-block">
                    <span class="relative z-10">{link.text}</span>
                    <span class="absolute left-0 bottom-0 w-0 h-0.5 bg-zinc-800 dark:bg-zinc-200 transition-all duration-300 group-hover:w-full"></span>
                  </span>
                </a>
              </li>
            ))}
          </ul>
        </div>
        
        <!-- Now Playing Spotify section with enhanced design -->
        <div class="col-span-1 md:col-span-6">
          <h3 class="text-sm font-semibold text-zinc-900 dark:text-zinc-100 uppercase tracking-wider theme-transition-color flex items-center relative inline-block after:content-[''] after:absolute after:w-8 after:h-0.5 after:bg-zinc-300 dark:after:bg-zinc-700 after:bottom-0 after:left-0 pb-2">
            <span class="pulse-dot mr-2 w-2 h-2 bg-[#1DB954] rounded-full inline-block animate-pulse"></span>
            NOW PLAYING
          </h3>
          <div id="spotify-now-playing" class="mt-4 p-5 rounded-xl border border-zinc-200 dark:border-zinc-800 bg-zinc-50 dark:bg-zinc-800/50 theme-transition-all backdrop-blur-sm hover:shadow-md transition-all duration-300">
            <div class="flex items-center">
              <div class="w-16 h-16 rounded-lg bg-zinc-200 dark:bg-zinc-700 overflow-hidden mr-4 flex-shrink-0 shadow-md transition-all duration-500 hover:shadow-xl" id="track-artwork">
                <img src="https://i.scdn.co/image/ab67616d0000b273c5716278a9e4964150cc0eb9" alt="Album artwork" class="w-full h-full object-cover transition-all duration-700 hover:scale-110" id="track-image">
              </div>
              <div class="flex-1 min-w-0">
                <div class="marquee-container">
                  <p class="font-medium text-zinc-900 dark:text-zinc-100 truncate transition-all duration-300" id="track-name">Are We About To Kiss?</p>
                </div>
                <div class="marquee-container">
                  <p class="text-sm text-zinc-600 dark:text-zinc-400 truncate transition-all duration-300" id="track-artist">Clouttdemon666</p>
                </div>
                <div class="flex items-center mt-1 text-xs text-zinc-500 dark:text-zinc-500">
                  <span id="current-time" class="transition-all duration-300">1:47</span>
                  <span class="mx-1">/</span>
                  <span id="total-time" class="transition-all duration-300">2:50</span>
                </div>
              </div>
              <a href="https://open.spotify.com/track/your-track-id" target="_blank" rel="noopener noreferrer" id="spotify-link" class="ml-4 flex-shrink-0 group">
                <svg class="w-8 h-8 text-[#1DB954] transition-transform duration-300 group-hover:scale-110 filter drop-shadow-sm" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
                </svg>
              </a>
            </div>
            <div class="mt-4">
              <div class="relative pt-1">
                <div class="overflow-hidden h-2 flex rounded-full bg-zinc-200 dark:bg-zinc-700 shadow-inner">
                  <div id="progress-bar" class="shadow-none flex flex-col justify-center bg-gradient-to-r from-[#1DB954] to-[#1ed760] rounded-full transition-all duration-300 ease-out" style="width: 62%">
                    <div class="progress-glow absolute inset-0 bg-[#1DB954]/20 blur-sm"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Bottom section with enhanced styling -->
      <div class="mt-12 pt-8 border-t border-zinc-200 dark:border-zinc-800 theme-transition-all">
        <div class="flex flex-col md:flex-row items-center justify-between gap-4">
          <p class="text-sm text-zinc-600 dark:text-zinc-400 theme-transition-color">
            &copy; {currentYear} All rights reserved.
          </p>
          
          <div class="flex items-center space-x-2">
            <span class="text-xs text-zinc-500 dark:text-zinc-400 theme-transition-color">Built with</span>
            <a 
              href="https://astro.build" 
              target="_blank" 
              rel="noopener noreferrer" 
              class="group inline-flex items-center text-xs text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 transition-colors"
            >
              <svg class="h-4 w-4 mr-1 text-[#FF5D01] group-hover:animate-pulse" viewBox="0 0 36 36" fill="none">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M8.833 22.958c.622-1.185 1.832-1.918 3.18-1.918 2.292 0 4.145 1.86 4.145 4.153 0 1.34-.626 2.54-1.601 3.303 1.223-1.299 1.97-3.048 1.97-4.971 0-3.994-3.243-7.233-7.242-7.233-2.818 0-5.26 1.6-6.469 3.933.78-2.912 3.428-5.06 6.577-5.06 3.75 0 6.79 3.035 6.79 6.78 0 2.606-1.468 4.868-3.616 6.002a4.163 4.163 0 0 0 2.285-3.724c0-2.293-1.853-4.153-4.145-4.153-1.348 0-2.558.733-3.18 1.918l1.306-3.03Z" fill="currentColor"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M22.155 12.056c-.622 1.185-1.832 1.918-3.18 1.918-2.292 0-4.145-1.86-4.145-4.153 0-1.34.626-2.54 1.601-3.303-1.223 1.299-1.97 3.048-1.97 4.971 0 3.994 3.243 7.233 7.242 7.233 2.818 0 5.26-1.6 6.469-3.933-.78 2.912-3.428 5.06-6.577 5.06-3.75 0-6.79-3.035-6.79-6.78 0-2.606 1.468-4.868 3.616-6.002a4.163 4.163 0 0 0-2.285 3.724c0 2.293 1.853 4.153 4.145 4.153 1.348 0 2.558-.733 3.18-1.918l-1.306 3.03Z" fill="currentColor"/>
              </svg>
              <span class="relative">
                Astro
                <span class="absolute left-0 bottom-0 w-0 h-0.5 bg-[#FF5D01] transition-all duration-300 group-hover:w-full"></span>
              </span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</footer>

<script>
  // Spotify API integration
  const SPOTIFY_CLIENT_ID = "17d505c9f2b642a181a1b75b52875208";
  const SPOTIFY_CLIENT_SECRET = "e710c77ac7694377a709041308bc2d83";
  const REFRESH_TOKEN = 'AQB_b3wwvKV2oHUCiYu7N765cS04M8jhVGpD_I8oHqTrnMdUEKWBkK0ual3KuLdb6gbHt4Y7Xviw9h56NdBDa33YZK2L0EY-Zupn24C0kWLg4fh1i7cClVPGyA6ScaoEr6M';
  
  // Cache for current track
  let currentTrackId = null;
  // Change the type declaration to allow for Timer/number
  let progressInterval: ReturnType<typeof setInterval> | null = null;
  let accessToken = null;
  let lastUpdateTime = 0;
  let currentProgress = 0;
  let trackDuration = 0;
  
  // Function to format time in MM:SS
  function formatTime(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }
  
  // Function to get access token
  async function getAccessToken() {
    try {
      // Check if we already have a valid token
      if (accessToken && Date.now() - lastUpdateTime < 3500000) { // Token is valid for 1 hour, refresh after 58 minutes
        return accessToken;
      }
      
      const response = await fetch('https://accounts.spotify.com/api/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' + btoa(SPOTIFY_CLIENT_ID + ':' + SPOTIFY_CLIENT_SECRET)
        },
        body: new URLSearchParams({
          grant_type: 'refresh_token',
          refresh_token: REFRESH_TOKEN
        })
      });
      
      const data = await response.json();
      accessToken = data.access_token;
      lastUpdateTime = Date.now();
      return accessToken;
    } catch (error) {
      console.error('Error getting access token:', error);
      return null;
    }
  }
  
  // Function to get currently playing track
  async function getCurrentlyPlaying(token) {
    try {
      const response = await fetch('https://api.spotify.com/v1/me/player/currently-playing', {
        headers: {
          'Authorization': 'Bearer ' + token
        }
      });
      
      if (response.status === 204) {
        return null; // No track playing
      }
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error fetching currently playing:', error);
      return null;
    }
  }
  
  // Function to show track change animation
  function showTrackChangeAnimation() {
    const animationEl = document.getElementById('track-change-animation');
    if (!animationEl) return; // Add null check
    
    animationEl.classList.remove('hidden');
    
    setTimeout(() => {
      if (!animationEl) return; // Add null check
      animationEl.classList.add('hidden');
    }, 1000);
  }
  
  // Function to handle text overflow with marquee effect
  function setupMarquee() {
    const containers = document.querySelectorAll('.marquee-container');
    
    containers.forEach(container => {
      const textElement = container.querySelector('p');
      if (!textElement) return;
      
      // Check if text is overflowing
      if (textElement.scrollWidth > container.clientWidth) {
        // Add null check before accessing properties
        if (container && !container.classList.contains('marquee-active')) {
          container.classList.add('marquee-active');
          
          // Clone the text for seamless scrolling
          const clone = textElement.cloneNode(true);
          const wrapper = document.createElement('div');
          wrapper.classList.add('marquee-wrapper');
          
          // Wrap the original text and its clone
          container.innerHTML = '';
          wrapper.appendChild(textElement);
          wrapper.appendChild(clone);
          container.appendChild(wrapper);
        }
      } else {
        // Remove marquee if text fits
        if (container.classList.contains('marquee-active')) {
          container.classList.remove('marquee-active');
          const pElement = container.querySelector('p');
          // Add null check before accessing textContent
          const originalText = pElement ? pElement.textContent : '';
          container.innerHTML = `<p class="${textElement.className}">${originalText}</p>`;
        }
      }
    });
  }
  
  // Function to update progress in real-time
  function startProgressInterval(startMs, durationMs) {
    // Clear any existing interval
    if (progressInterval) {
      clearInterval(progressInterval);
      progressInterval = null; // Reset to null after clearing
    }
    
    currentProgress = startMs;
    trackDuration = durationMs;
    const startTime = Date.now();
    
    // Update progress every 100ms for smooth animation
    progressInterval = setInterval(() => {
      const elapsed = Date.now() - startTime;
      currentProgress = startMs + elapsed;
      
      // If we've reached the end of the track, stop updating
      if (currentProgress >= durationMs) {
        if (progressInterval) { // Add null check
          clearInterval(progressInterval);
          progressInterval = null;
        }
        // Trigger a refresh to get the next track
        setTimeout(updateSpotifyNowPlaying, 1000);
        return;
      }
      
      // Update UI
      updateProgressUI(currentProgress, durationMs);
    }, 100);
  }
  
  // Function to update just the progress UI
  function updateProgressUI(progressMs, durationMs) {
    const progressBarEl = document.getElementById('progress-bar');
    const currentTimeEl = document.getElementById('current-time');
    
    if (progressBarEl && currentTimeEl && durationMs > 0) {
      const progress = (progressMs / durationMs) * 100;
      progressBarEl.style.width = `${progress}%`;
      currentTimeEl.textContent = formatTime(progressMs);
    }
  }
  
  // Function to update the UI
  function updateNowPlayingUI(data) {
    const trackNameEl = document.getElementById('track-name');
    const trackArtistEl = document.getElementById('track-artist');
    const trackImageEl = document.getElementById('track-image') as HTMLImageElement; // Type assertion
    const spotifyLinkEl = document.getElementById('spotify-link') as HTMLAnchorElement; // Type assertion
    const progressBarEl = document.getElementById('progress-bar');
    const currentTimeEl = document.getElementById('current-time');
    const totalTimeEl = document.getElementById('total-time');
    const nowPlayingEl = document.getElementById('spotify-now-playing');
    
    if (!data || !data.item || !trackNameEl || !trackArtistEl || !trackImageEl || 
        !spotifyLinkEl || !progressBarEl || !currentTimeEl || !totalTimeEl || !nowPlayingEl) {
      // Handle case when elements or data are missing
      if (trackNameEl) trackNameEl.textContent = 'Not playing';
      if (trackArtistEl) trackArtistEl.textContent = 'Spotify';
      if (trackImageEl) trackImageEl.src = '/placeholder.svg?height=56&width=56';
      if (spotifyLinkEl) spotifyLinkEl.href = 'https://open.spotify.com';
      if (progressBarEl) progressBarEl.style.width = '0%';
      if (currentTimeEl) currentTimeEl.textContent = '0:00';
      if (totalTimeEl) totalTimeEl.textContent = '0:00';
      if (nowPlayingEl) nowPlayingEl.classList.remove('is-playing');
      
      // Clear any progress interval
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
      
      return;
    }
    
    // Check if this is a new track
    const newTrackId = data.item.id;
    const isNewTrack = newTrackId !== currentTrackId;
    
    if (isNewTrack) {
      // Show track change animation
      showTrackChangeAnimation();
      
      // Update track info with fade effect
      trackNameEl.style.opacity = '0';
      trackArtistEl.style.opacity = '0';
      trackImageEl.style.opacity = '0';
      
      setTimeout(() => {
        if (!trackNameEl || !trackArtistEl || !trackImageEl || !spotifyLinkEl || !totalTimeEl) return;
        
        // Update track info
        trackNameEl.textContent = data.item.name;
        trackArtistEl.textContent = data.item.artists.map(artist => artist.name).join(', ');
        
        // Update image if available
        if (data.item.album.images && data.item.album.images.length > 0) {
          trackImageEl.src = data.item.album.images[0].url;
        }
        
        // Fade back in
        trackNameEl.style.opacity = '1';
        trackArtistEl.style.opacity = '1';
        trackImageEl.style.opacity = '1';
        
        // Setup marquee for text overflow
        setTimeout(setupMarquee, 100);
      }, 300);
      
      // Update link
      spotifyLinkEl.href = data.item.external_urls.spotify;
      totalTimeEl.textContent = formatTime(data.item.duration_ms);
      
      // Update current track ID
      currentTrackId = newTrackId;
    }
    
    // Add playing class
    nowPlayingEl.classList.add('is-playing');
    
    // Update progress and start real-time progress
    if (data.progress_ms !== undefined && data.item.duration_ms) {
      // Only restart the interval if it's a new track or if we don't have one running
      if (isNewTrack || !progressInterval) {
        startProgressInterval(data.progress_ms, data.item.duration_ms);
      }
    }
  }
  
  // Main function to fetch and update
  async function updateSpotifyNowPlaying() {
    try {
      const token = await getAccessToken();
      if (!token) return;
      
      const currentlyPlaying = await getCurrentlyPlaying(token);
      updateNowPlayingUI(currentlyPlaying);
    } catch (error) {
      console.error('Error updating Spotify now playing:', error);
    }
  }
  
  // Update on page load and every 5 seconds (as a fallback)
  document.addEventListener('DOMContentLoaded', () => {
    updateSpotifyNowPlaying();
    
    // Fallback polling every 5 seconds to catch any track changes
    // The real-time progress will handle most updates
    setInterval(updateSpotifyNowPlaying, 5000);
  });
</script>

<style>
  /* Theme transition utilities */
  .theme-transition-all {
    transition-property: background-color, border-color, color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
  
  .theme-transition-color {
    transition-property: color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
  
  .theme-transition-bg {
    transition-property: background-color;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
  
  /* Enhanced animations */
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.7;
      transform: scale(1.2);
    }
  }
  
  @keyframes float-slow {
    0%, 100% {
      transform: translateY(0) translateX(0);
    }
    25% {
      transform: translateY(-10px) translateX(10px);
    }
    50% {
      transform: translateY(-5px) translateX(-5px);
    }
    75% {
      transform: translateY(10px) translateX(5px);
    }
  }
  
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  .animate-float-slow {
    animation: float-slow 20s ease-in-out infinite;
  }
  
  .animation-delay-1000 {
    animation-delay: 1s;
  }
  
  .animation-delay-2000 {
    animation-delay: 2s;
  }
  
  /* Spotify player enhancements */
  .pulse-dot {
    position: relative;
  }
  
  .pulse-dot::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #1DB954;
    border-radius: 50%;
    animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
  }
  
  @keyframes pulse-ring {
    0% {
      transform: scale(0.8);
      opacity: 0.8;
    }
    80%, 100% {
      transform: scale(2);
      opacity: 0;
    }
  }
  
  /* Marquee animation for text overflow */
  .marquee-active .marquee-wrapper {
    display: flex;
    animation: marquee 15s linear infinite;
  }
  
  .marquee-active .marquee-wrapper > * {
    white-space: nowrap;
    padding-right: 24px;
  }
  
  @keyframes marquee {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }
  
  /* Track change animation */
  .track-change-overlay {
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.5rem;
    z-index: 20;
  }
  
  .spinner {
    width: 24px;
    height: 24px;
    border: 2px solid rgba(29, 185, 84, 0.3);
    border-top-color: #1DB954;
    border-radius: 50%;
    animation: spinner 0.8s linear infinite;
  }
  
  @keyframes spinner {
    to {
      transform: rotate(360deg);
    }
  }
  
  /* Progress bar glow effect */
  .progress-glow {
    animation: glow 2s ease-in-out infinite;
  }
  
  @keyframes glow {
    0%, 100% {
      opacity: 0.5;
    }
    50% {
      opacity: 0.8;
    }
  }
  
  /* Simplified hover effects for Spotify player */
  #spotify-now-playing {
    position: relative;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  #spotify-now-playing:hover {
    transform: translateY(-4px);
  }
  
  #spotify-now-playing::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(to bottom right, rgba(255,255,255,0.03), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: inherit;
    pointer-events: none;
  }
  
  #spotify-now-playing:hover::before {
    opacity: 1;
  }
  
  /* Simplified pulse animation */
  .pulse-dot {
    position: relative;
  }
  
  .pulse-dot::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #1DB954;
    border-radius: 50%;
    animation: simple-pulse 2s ease-out infinite;
    transform-origin: center;
  }
  
  @keyframes simple-pulse {
    0% {
      transform: scale(1);
      opacity: 0.7;
    }
    100% {
      transform: scale(2.5);
      opacity: 0;
    }
  }
  
  /* Improved hover effects */
  #spotify-now-playing {
    position: relative;
    overflow: hidden;
  }
  
  #spotify-now-playing::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle at center, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
    opacity: 0;
    transition: opacity 0.5s ease;
    transform: translate(-50%, -50%);
    pointer-events: none;
  }
  
  #spotify-now-playing:hover::before {
    opacity: 1;
  }
</style>

